{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axiosApiInstance from '../interceptor/interceptor';\n\nconst addLikeToPost = async (data, token) => {\n  return axiosApiInstance.post('/postlike/addLikeToPost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst checklikeToPost = async (data, token) => {\n  return axiosApiInstance.post('/postlike/checklikeToPost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst dislikePost = async (data, token) => {\n  return axiosApiInstance.post('/postlike/dislikePost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst addLikeToComment = async (data, token) => {\n  return axiosApiInstance.post('/postlike/addLikeToComment', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst checklikeToComment = async (data, token) => {\n  return axiosApiInstance.post('/postlike/checklikeToComment', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst dislikeToComment = async (data, token) => {\n  return axiosApiInstance.post('/postlike/dislikeToComment', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getLikestUserNameFromPost = async (data, token) => {\n  return axiosApiInstance.post('/postlike/getLikestUserNameFromPost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getLikestUserNameFromComment = async (data, token) => {\n  return axiosApiInstance.post('/postlike/getLikestUserNameFromComment', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst countPostLikes = async (data, token) => {\n  return axiosApiInstance.post('/postlike/countPostLikes', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst countPostCommentsLikes = async (data, token) => {\n  return axiosApiInstance.post('/postlike/countPostCommentsLikes', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nexport { countPostCommentsLikes, countPostLikes, getLikestUserNameFromComment, getLikestUserNameFromPost, dislikeToComment, checklikeToComment, addLikeToComment, dislikePost, addLikeToPost, checklikeToPost };","map":{"version":3,"sources":["F:/AHKI/services/post_likes.js"],"names":["axiosApiInstance","addLikeToPost","data","token","post","headers","Authorization","checklikeToPost","dislikePost","addLikeToComment","checklikeToComment","dislikeToComment","getLikestUserNameFromPost","getLikestUserNameFromComment","countPostLikes","countPostCommentsLikes"],"mappings":"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","sourcesContent":["import axiosApiInstance from '../interceptor/interceptor'\r\n\r\nconst addLikeToPost = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/addLikeToPost',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst checklikeToPost = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/checklikeToPost',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst dislikePost = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/dislikePost',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst addLikeToComment = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/addLikeToComment',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst checklikeToComment = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/checklikeToComment',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst dislikeToComment = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/dislikeToComment',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst getLikestUserNameFromPost = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/getLikestUserNameFromPost',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst getLikestUserNameFromComment = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/getLikestUserNameFromComment',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst countPostLikes = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/countPostLikes',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst countPostCommentsLikes = async (data,token) => {\r\n    return axiosApiInstance.post('/postlike/countPostCommentsLikes',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\n  export {countPostCommentsLikes,countPostLikes,getLikestUserNameFromComment,getLikestUserNameFromPost,dislikeToComment,checklikeToComment,addLikeToComment,dislikePost,addLikeToPost,checklikeToPost}"]},"metadata":{},"sourceType":"module"}