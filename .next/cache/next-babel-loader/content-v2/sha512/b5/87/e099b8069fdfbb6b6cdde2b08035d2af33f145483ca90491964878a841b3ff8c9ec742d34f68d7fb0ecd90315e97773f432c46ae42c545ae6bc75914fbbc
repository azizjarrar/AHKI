{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axiosApiInstance from '../interceptor/interceptor';\n\nconst addCommentToImage = async (data, token) => {\n  return axiosApiInstance.post('/imageComments/addCommentToImage', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getCommentsImage = async (data, token) => {\n  return axiosApiInstance.post('/imageComments/getCommentsImage', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst deleteCommentFromImage = async (data, token) => {\n  return axiosApiInstance.post('/imageComments/deleteCommentFromImage', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst countComments = async (data, token) => {\n  return axiosApiInstance.post('/imageComments/countComments', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n/*****************************/\n\n\nexport { countComments, deleteCommentFromImage, addCommentToImage, getCommentsImage };","map":{"version":3,"sources":["F:/AHKI/services/imageComments.js"],"names":["axiosApiInstance","addCommentToImage","data","token","post","headers","Authorization","getCommentsImage","deleteCommentFromImage","countComments"],"mappings":";;;;;;AAAA,OAAOA,gBAAP,MAA6B,4BAA7B;;AACA,MAAMC,iBAAiB,GAAG,OAAOC,IAAP,EAAYC,KAAZ,KAAsB;AAC9C,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,kCAAtB,oBAA6DF,IAA7D,GAAmE;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAnE,CAAP;AACD,CAFD;;AAGA,MAAMI,gBAAgB,GAAG,OAAOL,IAAP,EAAYC,KAAZ,KAAsB;AAC7C,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,iCAAtB,oBAA4DF,IAA5D,GAAkE;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAlE,CAAP;AACD,CAFD;;AAGA,MAAMK,sBAAsB,GAAG,OAAON,IAAP,EAAYC,KAAZ,KAAsB;AACnD,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,uCAAtB,oBAAkEF,IAAlE,GAAwE;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAxE,CAAP;AACD,CAFD;;AAGA,MAAMM,aAAa,GAAG,OAAOP,IAAP,EAAYC,KAAZ,KAAsB;AAC1C,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,8BAAtB,oBAAyDF,IAAzD,GAA+D;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAA/D,CAAP;AACD,CAFD;AAGA;;;AACA,SAAQM,aAAR,EAAsBD,sBAAtB,EAA8CP,iBAA9C,EAAiEM,gBAAjE","sourcesContent":["import axiosApiInstance from '../interceptor/interceptor'\r\nconst addCommentToImage = async (data,token) => {\r\n  return axiosApiInstance.post('/imageComments/addCommentToImage',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst getCommentsImage = async (data,token) => {\r\n  return axiosApiInstance.post('/imageComments/getCommentsImage',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst deleteCommentFromImage = async (data,token) => {\r\n  return axiosApiInstance.post('/imageComments/deleteCommentFromImage',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst countComments = async (data,token) => {\r\n  return axiosApiInstance.post('/imageComments/countComments',{...data},{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\n/*****************************/\r\nexport {countComments,deleteCommentFromImage, addCommentToImage ,getCommentsImage}"]},"metadata":{},"sourceType":"module"}