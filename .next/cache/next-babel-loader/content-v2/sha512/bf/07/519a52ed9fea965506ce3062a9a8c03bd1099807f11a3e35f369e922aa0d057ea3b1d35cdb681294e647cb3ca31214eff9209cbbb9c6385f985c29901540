{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Style from '../styles/chat.module.scss';\nimport NavBar from '../components/navBar/NavBar';\nimport { Picker, Emoji } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { searchUserNameApi } from '../services/user';\nimport { addMessage, getMessagesOfCurrentconversation, getUserWhoChatWith } from '../services/chat';\nimport socketContext from '../context/socketContext';\nimport userContext from '../context/userContext';\n\nconst chat = props => {\n  const [closeOrOpenEmojiPickerState, setcloseOrOpenEmojiPickerState] = React.useState(false);\n  const [EmojiContainerHeight, setEmojiContainerHeight] = React.useState(9); //responsive handler\n\n  const [listOfUsers, setListOfUsers] = React.useState([]);\n  const [currentUserToChatWith, setCurrentUserToChatWith] = React.useState({\n    currentImageUrl: undefined,\n    userName: undefined,\n    _id: undefined\n  });\n  const [message, setMessage] = React.useState(\"\");\n  const [currentChats, setCurrentChats] = React.useState([]);\n  const messagesComp = React.useRef(null);\n  const [user, setUser] = React.useContext(userContext);\n  const [socket, setSocket] = React.useContext(socketContext);\n  const [skip, setSkip] = React.useState(() => 0);\n  React.useEffect(() => {\n    if (user._id != undefined && user._id.length > 2) getUserWhoChatWith({}, props.token).then(result => {\n      let newUserWhoChatWith = result.data.data.map(e => {\n        if (e.firstUser._id == user._id) {\n          return Promise.resolve(_objectSpread(_objectSpread({}, e.secoundUser), {}, {\n            notSeenMessageNumber: e.notSeenMessageNumber\n          }));\n        } else {\n          return Promise.resolve(_objectSpread(_objectSpread({}, e.firstUser), {}, {\n            notSeenMessageNumber: e.notSeenMessageNumber\n          }));\n        }\n      });\n      Promise.all(newUserWhoChatWith).then(newarray => {\n        setListOfUsers([...newarray]);\n      });\n    }).catch(e => console.log(e.message));\n  }, [user]);\n  React.useEffect(() => {\n    if (currentUserToChatWith._id != undefined) {\n      getMessagesOfCurrentconversation({\n        secondUser: currentUserToChatWith._id,\n        skip: 0\n      }, props.token).then(data => {\n        setCurrentChats([...data.data.data.reverse()]);\n        messagesComp.current.scrollTop = messagesComp.current.scrollHeight + messagesComp.current.clientHeight;\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }, [currentUserToChatWith]);\n\n  const addEmoji = e => {\n    let sym = e.unified.split('-');\n    let codesArray = [];\n    sym.forEach(el => codesArray.push('0x' + el));\n    let emoji = String.fromCodePoint(...codesArray);\n    setMessage(el => {\n      return el + emoji;\n    });\n  };\n\n  const closeOrOpenEmojiPicker = () => {\n    setcloseOrOpenEmojiPickerState(e => !e);\n  };\n\n  const searchForUser = e => {\n    searchUserNameApi(e.target.value, props.token).then(result => {\n      if (result.data.data != undefined) {\n        setListOfUsers(e => {\n          return [...result.data.data];\n        });\n      }\n    });\n  };\n\n  const getUserdataFn = currentUserData => {\n    setCurrentUserToChatWith(currentUserData);\n  };\n\n  const sendMessage = () => {\n    if (message.length > 0 && currentUserToChatWith._id != undefined) {\n      addMessage({\n        receiver: currentUserToChatWith._id,\n        message: message,\n        FirstTime: currentChats.length\n      }, props.token).then(data => {\n        setCurrentChats(e => {\n          let r = Math.random().toString(36).substring(7);\n          return [...e, {\n            users: [user._id],\n            message: message,\n            _id: r\n          }];\n        });\n        messagesComp.current.scrollTop = messagesComp.current.scrollHeight + messagesComp.current.clientHeight;\n        socket.emit(\"sendMessageFromUserToUser\", {\n          otherUserId: currentUserToChatWith._id,\n          text: message,\n          senderId: user._id\n        });\n        setMessage(\"\");\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  const messageHandler = e => {\n    setMessage(e.target.value);\n  };\n\n  React.useEffect(() => {\n    async function chatHandler(data) {\n      let audio = new Audio(\"./msgSound.mp3\");\n      audio.play();\n      let ListOfUser = await listOfUsers.map(e => {\n        if (data.senderId == e._id && currentUserToChatWith._id != e._id) {\n          e.notSeenMessageNumber = e.notSeenMessageNumber + 1;\n          return Promise.resolve(e);\n        } else {\n          return Promise.resolve(e);\n        }\n      });\n      Promise.all(ListOfUser).then(data => {\n        setListOfUsers(data);\n      });\n\n      if (data.senderId == currentUserToChatWith._id) {\n        setMessage(\"\");\n        setCurrentChats(e => {\n          let r = Math.random().toString(36).substring(7);\n          return [...e, {\n            users: [data.senderId],\n            message: data.text,\n            _id: r\n          }];\n        });\n        messagesComp.current.scrollTop = messagesComp.current.scrollHeight + messagesComp.current.clientHeight;\n      } else {}\n    }\n\n    if (socket != undefined && socket != null) {\n      socket.on(\"getMessageFromUserToUser\", chatHandler);\n    }\n\n    return () => {\n      if (socket != undefined && socket != null) {\n        socket.off('getMessageFromUserToUser', chatHandler);\n      }\n    };\n  });\n\n  const scrollfn = e => {\n    //if( e.target.scrollTop === (e.target.scrollHeight - e.target.offsetHeight)){\n    if (e.target.scrollTop === 0) {\n      setSkip(e => e + 20);\n    }\n  };\n\n  React.useEffect(() => {\n    getMessagesOfCurrentconversation({\n      secondUser: currentUserToChatWith._id,\n      skip: skip\n    }, props.token).then(data => {\n      setCurrentChats(e => [...data.data.data.reverse(), ...e]);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [skip]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: Style.container,\n    children: [/*#__PURE__*/_jsx(NavBar, {\n      token: props.token\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: Style.chatAndRandomOnlineUserContaner,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: Style.UserContaner,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: Style.header,\n          children: /*#__PURE__*/_jsx(\"h1\", {\n            children: \"contacts\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: Style.listContacs,\n          children: listOfUsers.map(e => /*#__PURE__*/_jsx(Users, {\n            getUserdata: getUserdataFn,\n            userData: e\n          }, e._id))\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: Style.bottom,\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: Style.searchContainer,\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: Style.inputcss,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                onChange: e => searchForUser(e),\n                type: \"text\",\n                required: true\n              }), /*#__PURE__*/_jsx(\"label\", {\n                children: /*#__PURE__*/_jsx(\"span\", {\n                  children: \"Search users\"\n                })\n              })]\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: Style.chat,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: Style.header,\n          children: /*#__PURE__*/_jsx(\"h1\", {\n            children: \"Messages\"\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: Style.chatContainer,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: Style.headerOfChatuserNameAndName,\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: Style.userImageContainer,\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: currentUserToChatWith.currentImageUrl || \"/avatar.png\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: Style.userName,\n              children: /*#__PURE__*/_jsx(\"h3\", {\n                children: currentUserToChatWith.userName\n              })\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            onScroll: e => scrollfn(e),\n            ref: messagesComp,\n            className: Style.messages,\n            children: currentChats.map(e => {\n              return /*#__PURE__*/_jsx(\"div\", {\n                className: Style.oneMessage,\n                children: e.users[0] == currentUserToChatWith._id ? /*#__PURE__*/_jsx(\"div\", {\n                  className: Style.messageText,\n                  \"text-data\": e.date != undefined ? e.date.slice(0, 10) + \" \" + e.date.slice(11, 16) : false,\n                  style: {\n                    \"--i\": \"0%\",\n                    float: \"left\",\n                    backgroundColor: \"#e4e6eb\",\n                    color: \"black\"\n                  },\n                  children: /*#__PURE__*/_jsx(\"p\", {\n                    children: e.message\n                  })\n                }) : /*#__PURE__*/_jsx(\"div\", {\n                  className: Style.messageText,\n                  \"text-data\": e.date != undefined ? e.date.slice(0, 10) + \" \" + e.date.slice(11, 16) : false,\n                  style: {\n                    \"--i\": \"-100%\",\n                    float: \"right\",\n                    backgroundColor: \"#1876f3\",\n                    color: \"white\"\n                  },\n                  children: /*#__PURE__*/_jsx(\"p\", {\n                    children: e.message\n                  })\n                })\n              }, e._id);\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: Style.sendMessage,\n          children: /*#__PURE__*/_jsxs(\"form\", {\n            onSubmit: e => e.preventDefault(),\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: Style.inputContainer,\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: Style.inputcss,\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  value: message,\n                  onChange: e => messageHandler(e),\n                  type: \"text\",\n                  required: true\n                }), /*#__PURE__*/_jsx(\"label\", {\n                  children: /*#__PURE__*/_jsx(\"span\", {\n                    children: \"Message\"\n                  })\n                })]\n              })\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: Style.btns,\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                className: Style.openOrCloseEmojiPicker,\n                onClick: () => closeOrOpenEmojiPicker(),\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  className: Style.emojiLogo,\n                  children: /*#__PURE__*/_jsx(Emoji, {\n                    emoji: {\n                      id: 'smiling_face_with_3_hearts',\n                      skin: 3\n                    },\n                    size: 16\n                  })\n                }), closeOrOpenEmojiPickerState && /*#__PURE__*/_jsx(\"div\", {\n                  className: Style.emojiPickerContainer,\n                  children: /*#__PURE__*/_jsx(Picker, {\n                    perLine: EmojiContainerHeight,\n                    onSelect: e => addEmoji(e)\n                  })\n                })]\n              }), /*#__PURE__*/_jsx(\"button\", {\n                type: \"submit\",\n                className: Style.btnsend,\n                onClick: () => sendMessage(),\n                children: /*#__PURE__*/_jsx(\"span\", {\n                  className: Style.sendMessageBtn,\n                  children: /*#__PURE__*/_jsx(SentSvg, {})\n                })\n              })]\n            })]\n          })\n        })]\n      })]\n    })]\n  });\n};\n\nexport default chat;\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  return req.cookies.token ? {\n    props: {\n      token: req.cookies.token\n    }\n  } : {\n    props: {\n      token: false\n    }\n  };\n}\n\nconst SentSvg = () => {\n  return /*#__PURE__*/_jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 64 64\",\n    children: /*#__PURE__*/_jsxs(\"g\", {\n      id: \"Layer_95\",\n      \"data-name\": \"Layer 95\",\n      children: [/*#__PURE__*/_jsx(\"path\", {\n        d: \"M53.06,10.94a1.5,1.5,0,0,0-1.53-.36l-40,13.33a1.51,1.51,0,0,0-.06,2.83l18.7,7.09,7.09,18.7a1.51,1.51,0,0,0,1.44,1,1.49,1.49,0,0,0,1.39-1l13.33-40A1.5,1.5,0,0,0,53.06,10.94Z\"\n      }), /*#__PURE__*/_jsx(\"path\", {\n        d: \"M20.22,35.48a1.5,1.5,0,0,0-2.12-2.12l-4.48,4.48a1.51,1.51,0,0,0,0,2.12,1.49,1.49,0,0,0,2.12,0Z\"\n      }), /*#__PURE__*/_jsx(\"path\", {\n        d: \"M23.88,40.12a1.49,1.49,0,0,0-2.12,0L16.08,45.8a1.5,1.5,0,0,0,2.12,2.12l5.68-5.68A1.49,1.49,0,0,0,23.88,40.12Z\"\n      }), /*#__PURE__*/_jsx(\"path\", {\n        d: \"M28.52,43.78,24,48.26a1.5,1.5,0,0,0,2.12,2.12l4.48-4.48A1.5,1.5,0,0,0,28.52,43.78Z\"\n      })]\n    })\n  });\n};\n\nconst Users = props => {\n  const [notSeenMessageNumberlocal, setNotSeenMessageNumberlocal] = React.useState(props.userData.notSeenMessageNumber);\n  React.useEffect(() => {\n    setNotSeenMessageNumberlocal(props.userData.notSeenMessageNumber);\n  }, [props.userData.notSeenMessageNumber]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: Style.userContainer,\n      onClick: () => {\n        props.getUserdata(props.userData), setNotSeenMessageNumberlocal(0);\n      },\n      children: [notSeenMessageNumberlocal != 0 && /*#__PURE__*/_jsx(\"div\", {\n        className: Style.notSeenMessageNumbe,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          children: notSeenMessageNumberlocal\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: Style.imgContainer,\n        children: /*#__PURE__*/_jsx(\"img\", {\n          src: props.userData.currentImageUrl || \"/avatar.png\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: Style.userName,\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: props.userData.userName\n        })\n      })]\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}