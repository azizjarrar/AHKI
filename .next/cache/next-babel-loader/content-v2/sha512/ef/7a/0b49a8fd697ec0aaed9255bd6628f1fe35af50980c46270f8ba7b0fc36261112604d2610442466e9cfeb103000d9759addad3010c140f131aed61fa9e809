{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axiosApiInstance from '../interceptor/interceptor';\n\nconst Login = async data => {\n  return axiosApiInstance.post('/user/login', _objectSpread({}, data));\n};\n\nconst LoginFacebook = async data => {\n  return axiosApiInstance.post('/user/loginfacebook', _objectSpread({}, data));\n};\n\nconst Register = async data => {\n  return axiosApiInstance.post('/user/register', _objectSpread({}, data));\n};\n\nconst GetUserData = async token => {\n  return axiosApiInstance.get('/user/GetUserData', {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst ChangeProfileImage = async (file, token) => {\n  return axiosApiInstance.post(\"/user/changeprofileimage\", file, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst GetOtherUsersData = async (id, token) => {\n  return axiosApiInstance.post(\"/user/getotherUsersData/\" + id, {}, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst activeAccount = async (userid, verificationCode) => {\n  return axiosApiInstance.post(\"/user/activeAccount\", {\n    userid,\n    verificationCode\n  });\n};\n\nconst reSendVerificationCode = async (userid, verificationCode) => {\n  return axiosApiInstance.post(\"/user/reSendVerificationCode\", {\n    userid,\n    verificationCode\n  });\n};\n\nconst removeToken = async userid => {\n  return axiosApiInstance.post(\"/user/removeToken\", {\n    userid\n  });\n};\n\nconst updateProfileInfo = async (newUserData, token) => {\n  return axiosApiInstance.post(\"/user/updateProfileInfo\", _objectSpread({}, newUserData), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst changePassword = async (passwordChange, token) => {\n  return axiosApiInstance.post(\"/user/changePassword\", _objectSpread({}, passwordChange), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst searchAccountToForgetPassword = async identity => {\n  return axiosApiInstance.post(\"/user/searchAccountToForgetPassword\", _objectSpread({}, identity));\n};\n\nconst resetPasswordApi = async dataResetPassword => {\n  return axiosApiInstance.post(\"/user/resetPassword\", _objectSpread({}, dataResetPassword));\n};\n\nconst SetNewPasswordApi = async newPasswordAndTokenAndTelOrEmail => {\n  return axiosApiInstance.post(\"/user/SetNewPassword\", _objectSpread({}, newPasswordAndTokenAndTelOrEmail));\n};\n\nconst updateEmailSendCode = async (email, token) => {\n  return axiosApiInstance.post(\"/user/updateEmailSendCode\", {\n    email: email\n  }, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst updateEmailApi = async (email, code, token) => {\n  return axiosApiInstance.post(\"/user/updateEmail\", {\n    email: email,\n    code: code\n  }, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getrandomUsersApi = async (token, randomusers) => {\n  return axiosApiInstance.post(\"/user/getrandomUsers\", _objectSpread({}, randomusers), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst searchUserNameApi = async (searchUserName, token) => {\n  return axiosApiInstance.post(\"/user/SearchUserByUserName\", {\n    searchUserName: searchUserName\n  }, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getPrivacy = async token => {\n  return axiosApiInstance.post(\"/user/getPrivacy\", {}, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst updatePrivacy = async (data, token) => {\n  return axiosApiInstance.post(\"/user/updatePrivacy\", _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nexport { updatePrivacy, getPrivacy, searchUserNameApi, getrandomUsersApi, updateEmailApi, updateEmailSendCode, SetNewPasswordApi, resetPasswordApi, searchAccountToForgetPassword, changePassword, updateProfileInfo, Login, removeToken, Register, LoginFacebook, GetUserData, ChangeProfileImage, GetOtherUsersData, reSendVerificationCode, activeAccount };","map":{"version":3,"sources":["F:/AHKI/services/user.js"],"names":["axiosApiInstance","Login","data","post","LoginFacebook","Register","GetUserData","token","get","headers","Authorization","ChangeProfileImage","file","GetOtherUsersData","id","activeAccount","userid","verificationCode","reSendVerificationCode","removeToken","updateProfileInfo","newUserData","changePassword","passwordChange","searchAccountToForgetPassword","identity","resetPasswordApi","dataResetPassword","SetNewPasswordApi","newPasswordAndTokenAndTelOrEmail","updateEmailSendCode","email","updateEmailApi","code","getrandomUsersApi","randomusers","searchUserNameApi","searchUserName","getPrivacy","updatePrivacy"],"mappings":";;;;;;AAAA,OAAOA,gBAAP,MAA6B,4BAA7B;;AACA,MAAMC,KAAK,GAAG,MAAOC,IAAP,IAAgB;AAC5B,SAAOF,gBAAgB,CAACG,IAAjB,CAAsB,aAAtB,oBAAwCD,IAAxC,EAAP;AACD,CAFD;;AAGA,MAAME,aAAa,GAAG,MAAOF,IAAP,IAAgB;AACpC,SAAOF,gBAAgB,CAACG,IAAjB,CAAsB,qBAAtB,oBAAgDD,IAAhD,EAAP;AACD,CAFD;;AAGA,MAAMG,QAAQ,GAAG,MAAOH,IAAP,IAAgB;AAC/B,SAAOF,gBAAgB,CAACG,IAAjB,CAAsB,gBAAtB,oBAA2CD,IAA3C,EAAP;AACD,CAFD;;AAGA,MAAMI,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACnC,SAAOP,gBAAgB,CAACQ,GAAjB,CAAqB,mBAArB,EAAyC;AAAEC,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAzC,CAAP;AACD,CAFD;;AAGA,MAAMI,kBAAkB,GAAG,OAAOC,IAAP,EAAYL,KAAZ,KAAoB;AAC7C,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,0BAAtB,EAAiDS,IAAjD,EAAsD;AAAEH,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAtD,CAAP;AACD,CAFD;;AAGA,MAAMM,iBAAiB,GAAC,OAAOC,EAAP,EAAUP,KAAV,KAAkB;AACxC,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,6BAA2BW,EAAjD,EAAoD,EAApD,EAAuD;AAAEL,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAvD,CAAP;AACD,CAFD;;AAGA,MAAMQ,aAAa,GAAC,OAAOC,MAAP,EAAcC,gBAAd,KAAiC;AACnD,SAAOjB,gBAAgB,CAACG,IAAjB,CAAsB,qBAAtB,EAA4C;AAACa,IAAAA,MAAD;AAAQC,IAAAA;AAAR,GAA5C,CAAP;AACD,CAFD;;AAGA,MAAMC,sBAAsB,GAAC,OAAOF,MAAP,EAAcC,gBAAd,KAAiC;AAC5D,SAAOjB,gBAAgB,CAACG,IAAjB,CAAsB,8BAAtB,EAAqD;AAACa,IAAAA,MAAD;AAAQC,IAAAA;AAAR,GAArD,CAAP;AACD,CAFD;;AAGA,MAAME,WAAW,GAAC,MAAOH,MAAP,IAAgB;AAChC,SAAOhB,gBAAgB,CAACG,IAAjB,CAAsB,mBAAtB,EAA0C;AAACa,IAAAA;AAAD,GAA1C,CAAP;AACD,CAFD;;AAGA,MAAMI,iBAAiB,GAAC,OAAOC,WAAP,EAAmBd,KAAnB,KAA2B;AACjD,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,yBAAtB,oBAAoDkB,WAApD,GAAiE;AAAEZ,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAjE,CAAP;AACD,CAFD;;AAGA,MAAMe,cAAc,GAAC,OAAOC,cAAP,EAAsBhB,KAAtB,KAA8B;AACjD,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,sBAAtB,oBAAiDoB,cAAjD,GAAiE;AAAEd,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAjE,CAAP;AACD,CAFD;;AAGA,MAAMiB,6BAA6B,GAAC,MAAOC,QAAP,IAAkB;AACpD,SAAOzB,gBAAgB,CAACG,IAAjB,CAAsB,qCAAtB,oBAAgEsB,QAAhE,EAAP;AACD,CAFD;;AAGA,MAAMC,gBAAgB,GAAC,MAAOC,iBAAP,IAA2B;AAChD,SAAO3B,gBAAgB,CAACG,IAAjB,CAAsB,qBAAtB,oBAAgDwB,iBAAhD,EAAP;AACD,CAFD;;AAGA,MAAMC,iBAAiB,GAAC,MAAOC,gCAAP,IAA0C;AAChE,SAAO7B,gBAAgB,CAACG,IAAjB,CAAsB,sBAAtB,oBAAiD0B,gCAAjD,EAAP;AACD,CAFD;;AAGA,MAAMC,mBAAmB,GAAC,OAAOC,KAAP,EAAaxB,KAAb,KAAqB;AAC7C,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,2BAAtB,EAAkD;AAAC4B,IAAAA,KAAK,EAACA;AAAP,GAAlD,EAAgE;AAAEtB,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAhE,CAAP;AACD,CAFD;;AAGA,MAAMyB,cAAc,GAAC,OAAMD,KAAN,EAAYE,IAAZ,EAAiB1B,KAAjB,KAAyB;AAC5C,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,mBAAtB,EAA0C;AAAC4B,IAAAA,KAAK,EAACA,KAAP;AAAaE,IAAAA,IAAI,EAACA;AAAlB,GAA1C,EAAkE;AAAExB,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAlE,CAAP;AACD,CAFD;;AAIA,MAAM2B,iBAAiB,GAAC,OAAM3B,KAAN,EAAY4B,WAAZ,KAA0B;AAChD,SAAOnC,gBAAgB,CAACG,IAAjB,CAAsB,sBAAtB,oBAAiDgC,WAAjD,GAA8D;AAAE1B,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAA9D,CAAP;AACD,CAFD;;AAGA,MAAM6B,iBAAiB,GAAC,OAAMC,cAAN,EAAqB9B,KAArB,KAA6B;AACnD,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,4BAAtB,EAAmD;AAACkC,IAAAA,cAAc,EAACA;AAAhB,GAAnD,EAAmF;AAAE5B,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAnF,CAAP;AACD,CAFD;;AAKA,MAAM+B,UAAU,GAAC,MAAM/B,KAAN,IAAc;AAC7B,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,kBAAtB,EAAyC,EAAzC,EAA4C;AAAEM,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAA5C,CAAP;AACD,CAFD;;AAGA,MAAMgC,aAAa,GAAC,OAAMrC,IAAN,EAAWK,KAAX,KAAmB;AACrC,SAAOP,gBAAgB,CAACG,IAAjB,CAAsB,qBAAtB,oBAAgDD,IAAhD,GAAsD;AAAEO,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAtD,CAAP;AACD,CAFD;;AAGA,SAAQgC,aAAR,EAAsBD,UAAtB,EAAiCF,iBAAjC,EAAmDF,iBAAnD,EAAqEF,cAArE,EAAoFF,mBAApF,EAAwGF,iBAAxG,EAA0HF,gBAA1H,EAA2IF,6BAA3I,EAAyKF,cAAzK,EAAyLF,iBAAzL,EAA2MnB,KAA3M,EAAkNkB,WAAlN,EAA+Nd,QAA/N,EAAwOD,aAAxO,EAAsPE,WAAtP,EAAkQK,kBAAlQ,EAAqRE,iBAArR,EAAuSK,sBAAvS,EAA8TH,aAA9T","sourcesContent":["import axiosApiInstance from '../interceptor/interceptor'\r\nconst Login = async (data) => {\r\n  return axiosApiInstance.post('/user/login',{...data})\r\n}\r\nconst LoginFacebook = async (data) => {\r\n  return axiosApiInstance.post('/user/loginfacebook',{...data})\r\n}\r\nconst Register = async (data) => {\r\n  return axiosApiInstance.post('/user/register',{...data})\r\n}\r\nconst GetUserData = async (token) => {\r\n  return axiosApiInstance.get('/user/GetUserData',{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst ChangeProfileImage = async (file,token)=>{\r\n  return axiosApiInstance.post(\"/user/changeprofileimage\",file,{ headers: {Authorization: 'Bearer ' + token }})\r\n}\r\nconst GetOtherUsersData=async (id,token)=>{\r\n  return axiosApiInstance.post(\"/user/getotherUsersData/\"+id,{},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst activeAccount=async (userid,verificationCode)=>{\r\n  return axiosApiInstance.post(\"/user/activeAccount\",{userid,verificationCode});\r\n}\r\nconst reSendVerificationCode=async (userid,verificationCode)=>{\r\n  return axiosApiInstance.post(\"/user/reSendVerificationCode\",{userid,verificationCode});\r\n}\r\nconst removeToken=async (userid)=>{\r\n  return axiosApiInstance.post(\"/user/removeToken\",{userid});\r\n}\r\nconst updateProfileInfo=async (newUserData,token)=>{\r\n  return axiosApiInstance.post(\"/user/updateProfileInfo\",{...newUserData},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst changePassword=async (passwordChange,token)=>{\r\n  return axiosApiInstance.post(\"/user/changePassword\",{...passwordChange},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst searchAccountToForgetPassword=async (identity)=>{\r\n  return axiosApiInstance.post(\"/user/searchAccountToForgetPassword\",{...identity});\r\n}\r\nconst resetPasswordApi=async (dataResetPassword)=>{\r\n  return axiosApiInstance.post(\"/user/resetPassword\",{...dataResetPassword});\r\n}\r\nconst SetNewPasswordApi=async (newPasswordAndTokenAndTelOrEmail)=>{\r\n  return axiosApiInstance.post(\"/user/SetNewPassword\",{...newPasswordAndTokenAndTelOrEmail});\r\n}\r\nconst updateEmailSendCode=async (email,token)=>{\r\n  return axiosApiInstance.post(\"/user/updateEmailSendCode\",{email:email},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst updateEmailApi=async(email,code,token)=>{\r\n  return axiosApiInstance.post(\"/user/updateEmail\",{email:email,code:code},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\n\r\nconst getrandomUsersApi=async(token,randomusers)=>{\r\n  return axiosApiInstance.post(\"/user/getrandomUsers\",{...randomusers},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst searchUserNameApi=async(searchUserName,token)=>{\r\n  return axiosApiInstance.post(\"/user/SearchUserByUserName\",{searchUserName:searchUserName},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\n\r\n\r\nconst getPrivacy=async(token)=>{\r\n  return axiosApiInstance.post(\"/user/getPrivacy\",{},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst updatePrivacy=async(data,token)=>{\r\n  return axiosApiInstance.post(\"/user/updatePrivacy\",{...data},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nexport {updatePrivacy,getPrivacy,searchUserNameApi,getrandomUsersApi,updateEmailApi,updateEmailSendCode,SetNewPasswordApi,resetPasswordApi,searchAccountToForgetPassword,changePassword ,updateProfileInfo,Login ,removeToken, Register,LoginFacebook,GetUserData,ChangeProfileImage,GetOtherUsersData,reSendVerificationCode,activeAccount}\r\n"]},"metadata":{},"sourceType":"module"}