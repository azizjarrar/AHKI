{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axiosApiInstance from '../interceptor/interceptor';\n\nconst addMessage = async (data, token) => {\n  return axiosApiInstance.post(\"/chat/addMessage\", _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getMessagesOfCurrentconversation = async (data, token) => {\n  return axiosApiInstance.post(\"/chat/getMessagesOfCurrentconversation\", _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getUserWhoChatWith = async (data, token) => {\n  return axiosApiInstance.post(\"/chat/getUserWhoChatWith\", _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getUnreadUsersChatsNumber = async (data, token) => {\n  return axiosApiInstance.post(\"/chat/getUnreadUsersChatsNumber\", _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst updateColorChat = async (data, token) => {\n  return axiosApiInstance.post(\"/chat/updateColorChat\", _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nexport { updateColorChat, getUnreadUsersChatsNumber, addMessage, getMessagesOfCurrentconversation, getUserWhoChatWith };","map":{"version":3,"sources":["F:/AHKI/services/chat.js"],"names":["axiosApiInstance","addMessage","data","token","post","headers","Authorization","getMessagesOfCurrentconversation","getUserWhoChatWith","getUnreadUsersChatsNumber","updateColorChat"],"mappings":";;;;;;AAAA,OAAOA,gBAAP,MAA6B,4BAA7B;;AAEA,MAAMC,UAAU,GAAC,OAAMC,IAAN,EAAWC,KAAX,KAAmB;AAChC,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,kBAAtB,oBAA6CF,IAA7C,GAAmD;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAnD,CAAP;AACH,CAFD;;AAGA,MAAMI,gCAAgC,GAAC,OAAML,IAAN,EAAWC,KAAX,KAAmB;AACtD,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,wCAAtB,oBAAmEF,IAAnE,GAAyE;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAzE,CAAP;AACH,CAFD;;AAGA,MAAMK,kBAAkB,GAAC,OAAMN,IAAN,EAAWC,KAAX,KAAmB;AACxC,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,0BAAtB,oBAAqDF,IAArD,GAA2D;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAA3D,CAAP;AACH,CAFD;;AAGA,MAAMM,yBAAyB,GAAC,OAAMP,IAAN,EAAWC,KAAX,KAAmB;AAC/C,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,iCAAtB,oBAA4DF,IAA5D,GAAkE;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAlE,CAAP;AACH,CAFD;;AAGA,MAAMO,eAAe,GAAC,OAAMR,IAAN,EAAWC,KAAX,KAAmB;AACrC,SAAOH,gBAAgB,CAACI,IAAjB,CAAsB,uBAAtB,oBAAkDF,IAAlD,GAAwD;AAAEG,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAAX,GAAxD,CAAP;AACH,CAFD;;AAGA,SAAQO,eAAR,EAAwBD,yBAAxB,EAAkDR,UAAlD,EAA6DM,gCAA7D,EAA8FC,kBAA9F","sourcesContent":["import axiosApiInstance from '../interceptor/interceptor'\r\n\r\nconst addMessage=async(data,token)=>{\r\n    return axiosApiInstance.post(\"/chat/addMessage\",{...data},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst getMessagesOfCurrentconversation=async(data,token)=>{\r\n    return axiosApiInstance.post(\"/chat/getMessagesOfCurrentconversation\",{...data},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst getUserWhoChatWith=async(data,token)=>{\r\n    return axiosApiInstance.post(\"/chat/getUserWhoChatWith\",{...data},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst getUnreadUsersChatsNumber=async(data,token)=>{\r\n    return axiosApiInstance.post(\"/chat/getUnreadUsersChatsNumber\",{...data},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nconst updateColorChat=async(data,token)=>{\r\n    return axiosApiInstance.post(\"/chat/updateColorChat\",{...data},{ headers: {Authorization: 'Bearer ' + token }});\r\n}\r\nexport {updateColorChat,getUnreadUsersChatsNumber,addMessage,getMessagesOfCurrentconversation,getUserWhoChatWith}"]},"metadata":{},"sourceType":"module"}