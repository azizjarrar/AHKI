{"ast":null,"code":"import axios from 'axios';\nimport { refreshAccessToken, deleteRefrechTokenOldOne } from '../services/refreshAccessToken';\nconst axiosApiInstance = axios.create({\n  //baseURL: 'http://46.101.169.142:5010/',\n  baseURL: 'http://127.0.0.1:5010/',\n  withCredentials: true\n});\naxiosApiInstance.defaults.withCredentials = true; //axiosApiInstance.defaults.baseURL = 'http://127.0.0.1:5010/' // set default url\n\naxiosApiInstance.interceptors.request.use(async config => {\n  return config;\n}, error => {\n  Promise.reject(error);\n});\naxiosApiInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  console.log(error);\n  const originalRequest = error.config;\n\n  if (error.message == \"Network Error\") {\n    // localStorage.removeItem('ref_token');\n    // await axios.post(\"api/logout\") // change token in cookies to the bew one\n    alert(error.message); //location.reload();\n\n    return;\n  }\n\n  if (error.response.status === 401) {\n    localStorage.removeItem('ref_token');\n    await axios.post(\"api/logout\"); // change token in cookies to the bew one\n\n    window.reload();\n    return;\n  }\n\n  if (error.response.status === 404) {\n    return;\n  }\n\n  if (error.response.status === 403 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const access_token = await refreshAccessToken(localStorage.getItem(\"ref_token\"));\n    deleteRefrechTokenOldOne(localStorage.getItem(\"ref_token\")); // send the ref token and get new token\n\n    originalRequest.headers.Authorization = 'Bearer ' + access_token.data.token;\n    await axios.post(\"api/setToken\", {\n      token: access_token.data.token\n    }); // change token in cookies to the bew one\n\n    localStorage.setItem(\"ref_token\", access_token.data.ref_token); // save the new ref_token\n\n    return axiosApiInstance(originalRequest); // return new  request with the new token\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosApiInstance;","map":{"version":3,"sources":["F:/AHKI/interceptor/interceptor.js"],"names":["axios","refreshAccessToken","deleteRefrechTokenOldOne","axiosApiInstance","create","baseURL","withCredentials","defaults","interceptors","request","use","config","error","Promise","reject","response","console","log","originalRequest","message","alert","status","localStorage","removeItem","post","window","reload","_retry","access_token","getItem","headers","Authorization","data","token","setItem","ref_token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,kBAAR,EAA2BC,wBAA3B,QAA0D,gCAA1D;AACA,MAAMC,gBAAgB,GAAGH,KAAK,CAACI,MAAN,CAAa;AACpC;AACDC,EAAAA,OAAO,EAAE,wBAF4B;AAGpCC,EAAAA,eAAe,EAAE;AAHmB,CAAb,CAAzB;AAKAH,gBAAgB,CAACI,QAAjB,CAA0BD,eAA1B,GAA4C,IAA5C,C,CACA;;AACAH,gBAAgB,CAACK,YAAjB,CAA8BC,OAA9B,CAAsCC,GAAtC,CACE,MAAMC,MAAN,IAAgB;AACZ,SAAOA,MAAP;AACH,CAHH,EAIEC,KAAK,IAAI;AAEPC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACH,CAPD;AAQAT,gBAAgB,CAACK,YAAjB,CAA8BO,QAA9B,CAAuCL,GAAvC,CAA4CK,QAAD,IAAc;AACvD,SAAOA,QAAP;AACD,CAFD,EAEG,gBAAgBH,KAAhB,EAAuB;AACxBI,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,QAAMM,eAAe,GAAGN,KAAK,CAACD,MAA9B;;AACA,MAAGC,KAAK,CAACO,OAAN,IAAe,eAAlB,EAAkC;AACjC;AACA;AAECC,IAAAA,KAAK,CAACR,KAAK,CAACO,OAAP,CAAL,CAJgC,CAKhC;;AACA;AACD;;AACD,MAAGP,KAAK,CAACG,QAAN,CAAeM,MAAf,KAAyB,GAA5B,EAAgC;AAC9BC,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACA,UAAMvB,KAAK,CAACwB,IAAN,CAAW,YAAX,CAAN,CAF8B,CAEC;;AAC/BC,IAAAA,MAAM,CAACC,MAAP;AAEA;AACD;;AACD,MAAGd,KAAK,CAACG,QAAN,CAAeM,MAAf,KAA0B,GAA7B,EAAiC;AAC/B;AACD;;AACD,MAAIT,KAAK,CAACG,QAAN,CAAeM,MAAf,KAA0B,GAA1B,IAAiC,CAACH,eAAe,CAACS,MAAtD,EAA8D;AAC1DT,IAAAA,eAAe,CAACS,MAAhB,GAAyB,IAAzB;AACA,UAAMC,YAAY,GAAG,MAAM3B,kBAAkB,CAACqB,YAAY,CAACO,OAAb,CAAqB,WAArB,CAAD,CAA7C;AACA3B,IAAAA,wBAAwB,CAACoB,YAAY,CAACO,OAAb,CAAqB,WAArB,CAAD,CAAxB,CAH0D,CAI1D;;AACAX,IAAAA,eAAe,CAACY,OAAhB,CAAwBC,aAAxB,GAAwC,YAAYH,YAAY,CAACI,IAAb,CAAkBC,KAAtE;AACA,UAAMjC,KAAK,CAACwB,IAAN,CAAW,cAAX,EAA0B;AAACS,MAAAA,KAAK,EAACL,YAAY,CAACI,IAAb,CAAkBC;AAAzB,KAA1B,CAAN,CAN0D,CAMO;;AACjEX,IAAAA,YAAY,CAACY,OAAb,CAAqB,WAArB,EAAiCN,YAAY,CAACI,IAAb,CAAkBG,SAAnD,EAP0D,CAOI;;AAC9D,WAAOhC,gBAAgB,CAACe,eAAD,CAAvB,CAR0D,CAQhB;AAC7C;;AACD,SAAOL,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAlCD;AAoCA,eAAgBT,gBAAhB","sourcesContent":["import axios from 'axios'\r\nimport {refreshAccessToken,deleteRefrechTokenOldOne} from '../services/refreshAccessToken'\r\nconst axiosApiInstance = axios.create({\r\n  //baseURL: 'http://46.101.169.142:5010/',\r\n baseURL: 'http://127.0.0.1:5010/',\r\n  withCredentials: true\r\n})\r\naxiosApiInstance.defaults.withCredentials = true\r\n//axiosApiInstance.defaults.baseURL = 'http://127.0.0.1:5010/' // set default url\r\naxiosApiInstance.interceptors.request.use(\r\n  async config => {\r\n      return config;\r\n  },\r\n  error => {\r\n\r\n    Promise.reject(error)\r\n});\r\naxiosApiInstance.interceptors.response.use((response) => {\r\n  return response\r\n}, async function (error) {\r\n  console.log(error)\r\n  const originalRequest = error.config;\r\n  if(error.message==\"Network Error\"){\r\n   // localStorage.removeItem('ref_token');\r\n   // await axios.post(\"api/logout\") // change token in cookies to the bew one\r\n\r\n    alert(error.message)\r\n    //location.reload();\r\n    return\r\n  }\r\n  if(error.response.status ===401){\r\n    localStorage.removeItem('ref_token');\r\n    await axios.post(\"api/logout\") // change token in cookies to the bew one\r\n    window.reload()\r\n\r\n    return\r\n  }\r\n  if(error.response.status === 404){\r\n    return\r\n  }\r\n  if (error.response.status === 403 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      const access_token = await refreshAccessToken(localStorage.getItem(\"ref_token\")); \r\n      deleteRefrechTokenOldOne(localStorage.getItem(\"ref_token\"))\r\n      // send the ref token and get new token\r\n      originalRequest.headers.Authorization = 'Bearer ' + access_token.data.token;\r\n      await axios.post(\"api/setToken\",{token:access_token.data.token}) // change token in cookies to the bew one\r\n      localStorage.setItem(\"ref_token\",access_token.data.ref_token) // save the new ref_token\r\n      return axiosApiInstance(originalRequest); // return new  request with the new token\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport  default axiosApiInstance;"]},"metadata":{},"sourceType":"module"}