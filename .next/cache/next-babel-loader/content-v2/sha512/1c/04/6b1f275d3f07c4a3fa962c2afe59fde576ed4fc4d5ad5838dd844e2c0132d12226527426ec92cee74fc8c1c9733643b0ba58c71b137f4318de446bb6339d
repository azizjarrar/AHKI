{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axiosApiInstance from '../interceptor/interceptor';\n\nconst Login = async data => {\n  return axiosApiInstance.post('/user/login', _objectSpread({}, data));\n};\n\nconst LoginFacebook = async data => {\n  return axiosApiInstance.post('/user/loginfacebook', _objectSpread({}, data));\n};\n\nconst Register = async data => {\n  return axiosApiInstance.post('/user/register', _objectSpread({}, data));\n};\n\nconst GetUserData = async token => {\n  return axiosApiInstance.get('/user/GetUserData', {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst ChangeProfileImage = async (file, token) => {\n  return axiosApiInstance.post(\"/user/changeprofileimage\", file, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst GetOtherUsersData = async (id, token) => {\n  return axiosApiInstance.post(\"/user/getotherUsersData/\" + id, {}, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst activeAccount = async (userid, verificationCode) => {\n  return axiosApiInstance.post(\"/user/activeAccount\", {\n    userid,\n    verificationCode\n  });\n};\n\nconst reSendVerificationCode = async (userid, verificationCode) => {\n  return axiosApiInstance.post(\"/user/reSendVerificationCode\", {\n    userid,\n    verificationCode\n  });\n};\n\nconst removeToken = async userid => {\n  return axiosApiInstance.post(\"/user/removeToken\", {\n    userid\n  });\n};\n\nconst updateProfileInfo = async (newUserData, token) => {\n  return axiosApiInstance.post(\"/user/updateProfileInfo\", _objectSpread({}, newUserData), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst changePassword = async (passwordChange, token) => {\n  return axiosApiInstance.post(\"/user/changePassword\", _objectSpread({}, passwordChange), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst searchAccountToForgetPassword = async identity => {\n  return axiosApiInstance.post(\"/user/searchAccountToForgetPassword\", _objectSpread({}, identity));\n};\n\nconst resetPasswordApi = async dataResetPassword => {\n  return axiosApiInstance.post(\"/user/resetPassword\", _objectSpread({}, dataResetPassword));\n};\n\nconst SetNewPasswordApi = async newPasswordAndTokenAndTelOrEmail => {\n  return axiosApiInstance.post(\"/user/SetNewPassword\", _objectSpread({}, newPasswordAndTokenAndTelOrEmail));\n};\n\nconst updateEmailSendCode = async (email, token) => {\n  return axiosApiInstance.post(\"/user/updateEmailSendCode\", {\n    email: email\n  }, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst updateEmailApi = async (email, code, token) => {\n  return axiosApiInstance.post(\"/user/updateEmail\", {\n    email: email,\n    code: code\n  }, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getrandomUsersApi = async (token, randomusers) => {\n  return axiosApiInstance.post(\"/user/getrandomUsers\", _objectSpread({}, randomusers), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst searchUserNameApi = async (searchUserName, token) => {\n  return axiosApiInstance.post(\"/user/SearchUserByUserName\", {\n    searchUserName: searchUserName\n  }, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getPrivacy = async token => {\n  return axiosApiInstance.post(\"/user/getPrivacy\", {}, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst updatePrivacy = async (data, token) => {\n  return axiosApiInstance.post(\"/user/updatePrivacy\", _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nexport { updatePrivacy, getPrivacy, searchUserNameApi, getrandomUsersApi, updateEmailApi, updateEmailSendCode, SetNewPasswordApi, resetPasswordApi, searchAccountToForgetPassword, changePassword, updateProfileInfo, Login, removeToken, Register, LoginFacebook, GetUserData, ChangeProfileImage, GetOtherUsersData, reSendVerificationCode, activeAccount };","map":null,"metadata":{},"sourceType":"module"}