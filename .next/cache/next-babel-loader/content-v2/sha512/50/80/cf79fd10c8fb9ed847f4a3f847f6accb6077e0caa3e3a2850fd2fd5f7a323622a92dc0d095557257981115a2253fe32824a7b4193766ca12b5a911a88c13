{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axiosApiInstance from '../interceptor/interceptor';\n\nconst addLikeToPost = async (data, token) => {\n  return axiosApiInstance.post('/postlike/addLikeToPost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst checklikeToPost = async (data, token) => {\n  return axiosApiInstance.post('/postlike/checklikeToPost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst dislikePost = async (data, token) => {\n  return axiosApiInstance.post('/postlike/dislikePost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst addLikeToComment = async (data, token) => {\n  return axiosApiInstance.post('/postlike/addLikeToComment', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst checklikeToComment = async (data, token) => {\n  return axiosApiInstance.post('/postlike/checklikeToComment', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst dislikeToComment = async (data, token) => {\n  return axiosApiInstance.post('/postlike/dislikeToComment', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getLikestUserNameFromPost = async (data, token) => {\n  return axiosApiInstance.post('/postlike/getLikestUserNameFromPost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getLikestUserNameFromComment = async (data, token) => {\n  return axiosApiInstance.post('/postlike/getLikestUserNameFromComment', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst countPostLikes = async (data, token) => {\n  return axiosApiInstance.post('/postlike/countPostLikes', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst countPostCommentsLikes = async (data, token) => {\n  return axiosApiInstance.post('/postlike/countPostCommentsLikes', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nexport { countPostCommentsLikes, countPostLikes, getLikestUserNameFromComment, getLikestUserNameFromPost, dislikeToComment, checklikeToComment, addLikeToComment, dislikePost, addLikeToPost, checklikeToPost };","map":null,"metadata":{},"sourceType":"module"}