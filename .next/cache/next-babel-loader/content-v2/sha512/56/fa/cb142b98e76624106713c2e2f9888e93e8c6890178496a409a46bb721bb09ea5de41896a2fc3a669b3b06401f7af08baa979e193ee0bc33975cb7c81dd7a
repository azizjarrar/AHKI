{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axiosApiInstance from '../interceptor/interceptor';\n\nconst postnrmltopic = async (data, token) => {\n  return axiosApiInstance.post('/postnrmltopic/addPost', data, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst addDailyTopicPost = async (data, token) => {\n  return axiosApiInstance.post('/postnrmltopic/addDailyTopicPost', data, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getCurrentUserPosts = async token => {\n  return axiosApiInstance.post('/postnrmltopic/getCurrentUserPosts', {}, {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getOtherUserPosts = async (data, token) => {\n  return axiosApiInstance.post('/postnrmltopic/getOtherUserPosts', _objectSpread({}, data));\n};\n\nconst deletePost = async (data, token) => {\n  return axiosApiInstance.post('/postnrmltopic/deletePost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getFriendsPosts = async (data, token) => {\n  return axiosApiInstance.post('/postnrmltopic/getFriendsPosts', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nconst getTodayTopicPost = async (data, token) => {\n  return axiosApiInstance.post('/postnrmltopic/getTodayTopicPost', _objectSpread({}, data), {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  });\n};\n\nexport { getTodayTopicPost, addDailyTopicPost, getFriendsPosts, deletePost, getOtherUserPosts, postnrmltopic, getCurrentUserPosts };","map":null,"metadata":{},"sourceType":"module"}